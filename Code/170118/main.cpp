#include <iostream>
#include <string>
#include "LinkedList_Score.h"



//메뉴
std::string menu()
{
	std::string selected;

	std::cout << "--메 뉴------------------------------" << std::endl;
	std::cout << "명령에 해당하는 숫자를 입력하십시오." << std::endl;
	std::cout << "1. 성적 입력" << std::endl;
	std::cout << "2. 입력된 자료 확인" << std::endl;
	std::cout << "3. 계산 결과 출력" << std::endl;
	std::cout << "4. 종료" << std::endl;
	std::cout << "-------------------------------------" << std::endl;
	std::cout << ">";
	std::cin >> selected;

	return selected;
}

//LinkedList 생성자
LinkedList::LinkedList()
{
	head = nullptr;
	count = 0;
}

//LinkedList 소멸자
LinkedList::~LinkedList()
{
	LinkedList::clear();
}

//메뉴 1: 성적 입력
void LinkedList::add()
{
	Node* addNode = new Node;
	Node* scanNode;
	std::string gradeText_temp;
	char isMajor_temp;

	if (head == NULL)
	{
		std::cout << "--새 성적 입력-----------------------" << std::endl;

		std::cout << "- 과목명" << std::endl;
		std::cout << ">";
		std::cin >> addNode->value.name;

		std::cout << "- 단위(1학점, 2학점, 3학점 등)" << std::endl;
		std::cout << ">";
		std::cin >> addNode->value.credit;

		std::cout << "- 획득한 학점(A+, A, B 등)" << std::endl;
		std::cout << ">";
		std::cin >> gradeText_temp;

		if (gradeText_temp == "A+")
		{
			addNode->value.grade = 4.5;
			addNode->value.gradeText = "A+";
		}
		else if (gradeText_temp == "A")
		{
			addNode->value.grade = 4;
			addNode->value.gradeText = "A";
		}
		else if (gradeText_temp == "B+")
		{
			addNode->value.grade = 3.5;
			addNode->value.gradeText = "B+";
		}
		else if (gradeText_temp == "B")
		{
			addNode->value.grade = 3;
			addNode->value.gradeText = "B";
		}
		else if (gradeText_temp == "C+")
		{
			addNode->value.grade = 2.5;
			addNode->value.gradeText = "C+";
		}
		else if (gradeText_temp == "C")
		{
			addNode->value.grade = 2;
			addNode->value.gradeText = "C";
		}
		else if (gradeText_temp == "D+")
		{
			addNode->value.grade = 1.5;
			addNode->value.gradeText = "D+";
		}
		else if (gradeText_temp == "D")
		{
			addNode->value.grade = 1;
			addNode->value.gradeText = "D";
		}
		else if (gradeText_temp == "F")
		{
			addNode->value.grade = 0;
			addNode->value.gradeText = "F";
		}
		else
		{
			while (true)
			{
				std::cout << "입력값이 잘못되었습니다. 학점을 다시 입력하십시오." << std::endl;
				std::cout << "(A+, A, B+, B, C+, C, D+, D, F)" << std::endl;
				std::cout << ">";
				std::cin >> gradeText_temp;

				if (gradeText_temp == "A+")
				{
					addNode->value.grade = 4.5;
					addNode->value.gradeText = "A+";
					break;
				}
				else if (gradeText_temp == "A")
				{
					addNode->value.grade = 4;
					addNode->value.gradeText = "A";
					break;
				}
				else if (gradeText_temp == "B+")
				{
					addNode->value.grade = 3.5;
					addNode->value.gradeText = "B+";
					break;
				}
				else if (gradeText_temp == "B")
				{
					addNode->value.grade = 3;
					addNode->value.gradeText = "B";
					break;
				}
				else if (gradeText_temp == "C+")
				{
					addNode->value.grade = 2.5;
					addNode->value.gradeText = "C+";
					break;
				}
				else if (gradeText_temp == "C")
				{
					addNode->value.grade = 2;
					addNode->value.gradeText = "C";
					break;
				}
				else if (gradeText_temp == "D+")
				{
					addNode->value.grade = 1.5;
					addNode->value.gradeText = "D+";
					break;
				}
				else if (gradeText_temp == "D")
				{
					addNode->value.grade = 1;
					addNode->value.gradeText = "D";
					break;
				}
				else if (gradeText_temp == "F")
				{
					addNode->value.grade = 0;
					addNode->value.gradeText = "F";
					break;
				}
			}
		}

		std::cout << "전공 여부(Y, N)" << std::endl;
		std::cout << ">";
		std::cin >> isMajor_temp;

		if (isMajor_temp == 'Y' || isMajor_temp == 'y')
		{
			addNode->value.isMajor = true;
		}
		else if (isMajor_temp == 'N' || isMajor_temp == 'n')
		{
			addNode->value.isMajor = false;
		}
		else
		{
			while (true)
			{
				std::cout << "입력값이 잘못되었습니다. 전공 여부를 다시 입력하십시오." << std::endl;
				std::cout << "(Y, N)" << std::endl;
				std::cout << ">";
				std::cin >> isMajor_temp;

				if (isMajor_temp == 'Y' || isMajor_temp == 'y')
				{
					addNode->value.isMajor = true;
					break;
				}
				else if (isMajor_temp == 'N' || isMajor_temp == 'n')
				{
					addNode->value.isMajor = false;
					break;
				}
			}
		}

		std::cout << "-------------------------------------" << std::endl;

		addNode->next = NULL;
		head = addNode;
	}
	else
	{
		scanNode = head;
		while (scanNode->next != NULL)
		{
			scanNode = scanNode->next;
		}

		std::cout << "--새 성적 입력-----------------------" << std::endl;

		std::cout << "- 과목명" << std::endl;
		std::cout << ">";
		std::cin >> addNode->value.name;

		std::cout << "- 단위(1학점, 2학점, 3학점 등)" << std::endl;
		std::cout << ">";
		std::cin >> addNode->value.credit;

		std::cout << "- 획득한 학점(A+, A, B 등)" << std::endl;
		std::cout << ">";
		std::cin >> gradeText_temp;

		if (gradeText_temp == "A+")
		{
			addNode->value.grade = 4.5;
			addNode->value.gradeText = "A+";
		}
		else if (gradeText_temp == "A")
		{
			addNode->value.grade = 4;
			addNode->value.gradeText = "A";
		}
		else if (gradeText_temp == "B+")
		{
			addNode->value.grade = 3.5;
			addNode->value.gradeText = "B";
		}
		else if (gradeText_temp == "B")
		{
			addNode->value.grade = 3;
			addNode->value.gradeText = "B";
		}
		else if (gradeText_temp == "C+")
		{
			addNode->value.grade = 2.5;
			addNode->value.gradeText = "C+";
		}
		else if (gradeText_temp == "C")
		{
			addNode->value.grade = 2;
			addNode->value.gradeText = "C";
		}
		else if (gradeText_temp == "D+")
		{
			addNode->value.grade = 1.5;
			addNode->value.gradeText = "D+";
		}
		else if (gradeText_temp == "D")
		{
			addNode->value.grade = 1;
			addNode->value.gradeText = "D";
		}
		else if (gradeText_temp == "F")
		{
			addNode->value.grade = 0;
			addNode->value.gradeText = "F";
		}
		else
		{
			while (true)
			{
				std::cout << "입력값이 잘못되었습니다. 학점을 다시 입력하십시오." << std::endl;
				std::cout << "(A+, A, B+, B, C+, C, D+, D, F)" << std::endl;
				std::cout << ">";
				std::cin >> gradeText_temp;

				if (gradeText_temp == "A+")
				{
					addNode->value.grade = 4.5;
					addNode->value.gradeText = "A+";
					break;
				}
				else if (gradeText_temp == "A")
				{
					addNode->value.grade = 4;
					addNode->value.gradeText = "A";
					break;
				}
				else if (gradeText_temp == "B+")
				{
					addNode->value.grade = 3.5;
					addNode->value.gradeText = "B";
					break;
				}
				else if (gradeText_temp == "B")
				{
					addNode->value.grade = 3;
					addNode->value.gradeText = "B";
					break;
				}
				else if (gradeText_temp == "C+")
				{
					addNode->value.grade = 2.5;
					addNode->value.gradeText = "C+";
					break;
				}
				else if (gradeText_temp == "C")
				{
					addNode->value.grade = 2;
					addNode->value.gradeText = "C";
					break;
				}
				else if (gradeText_temp == "D+")
				{
					addNode->value.grade = 1.5;
					addNode->value.gradeText = "D+";
					break;
				}
				else if (gradeText_temp == "D")
				{
					addNode->value.grade = 1;
					addNode->value.gradeText = "D";
					break;
				}
				else if (gradeText_temp == "F")
				{
					addNode->value.grade = 0;
					addNode->value.gradeText = "F";
					break;
				}
			}
		}

		std::cout << "전공 여부(Y, N)" << std::endl;
		std::cout << ">";
		std::cin >> isMajor_temp;

		if (isMajor_temp == 'Y' || isMajor_temp == 'y')
		{
			addNode->value.isMajor = true;
		}
		else if (isMajor_temp == 'N' || isMajor_temp == 'n')
		{
			addNode->value.isMajor = false;
		}
		else
		{
			while (true)
			{
				std::cout << "입력값이 잘못되었습니다. 전공 여부를 다시 입력하십시오." << std::endl;
				std::cout << "(Y, N)" << std::endl;
				std::cout << ">";
				std::cin >> isMajor_temp;

				if (isMajor_temp == 'Y' || isMajor_temp == 'y')
				{
					addNode->value.isMajor = true;
					break;
				}
				else if (isMajor_temp == 'N' || isMajor_temp == 'n')
				{
					addNode->value.isMajor = false;
					break;
				}
			}
		}

		std::cout << "-------------------------------------" << std::endl;

		addNode->next = NULL;
		scanNode->next = addNode;
	}

	count++;
}

//메뉴 2: 입력된 자료 확인
void LinkedList::print()
{
	std::cout << "-------------------------------------" << std::endl;

	if (count <= 0)
	{
		std::cout << "아직 입력된 성적이 없습니다." << std::endl;
		return;
	}
	else if(head == NULL)
	{
		std::cout << "아직 입력된 성적이 없습니다." << std::endl;
		return;
	}
	else
	{
		Node* scanNode = head;

		while (scanNode != NULL)
		{
			if (scanNode->value.isMajor)
			{
				std::cout << scanNode->value.name << "(" << scanNode->value.credit << "학점, 전공): " << scanNode->value.gradeText << std::endl;
			}
			else
			{
				std::cout << scanNode->value.name << "(" << scanNode->value.credit << "학점, 교양): " << scanNode->value.gradeText << std::endl;
			}

			scanNode = scanNode->next;
		}
	}

	std::cout << "-------------------------------------" << std::endl;
}

//메뉴 3: 계산 결과 출력
void LinkedList::calculate()
{
	int credit_all_sum = 0;
	float grade_all_sum = 0.0f;
	int credit_major_sum = 0;
	float grade_major_sum = 0.0f;

	if (count <= 0)
	{
		std::cout << "아직 입력된 성적이 없습니다." << std::endl;
	}
	else if(head == NULL)
	{
		std::cout << "아직 입력된 성적이 없습니다." << std::endl;
	}
	else
	{
		Node* scanNode = head;

		while (scanNode != NULL)
		{
			credit_all_sum += scanNode->value.credit;
			grade_all_sum += scanNode->value.grade * scanNode->value.credit;
			if (scanNode->value.isMajor)
			{
				credit_major_sum += scanNode->value.credit;
				grade_major_sum += scanNode->value.grade * scanNode->value.credit;
			}

			scanNode = scanNode->next;
		}

		std::cout << "-------------------------------------" << std::endl;
		std::cout << "수강 강의 수: " << count << std::endl << std::endl;
		std::cout << "총 이수 학점: " << credit_all_sum << std::endl;
		std::cout << "총 평점평균: " << grade_all_sum / (float)credit_all_sum << std::endl << std::endl;
		std::cout << "전공 이수 학점: " << credit_major_sum << std::endl;
		std::cout << "전공 평점평균: " << grade_major_sum / (float)credit_major_sum << std::endl;
		std::cout << "-------------------------------------" << std::endl;
	}


}

//clear 함수
void LinkedList::clear()
{
	Node* scanNode = head;
	Node* prevNode;

	while (scanNode->next != NULL)
	{
		prevNode = scanNode;
		scanNode = scanNode->next;
		delete prevNode;
	}
	delete scanNode;
	count = 0;

	//QUESTION: 여기에서 생성자 함수를 호출해도 되는가
}

//main
//QUESTION: 왜 main을 맨 위로 올리면 에러가 나는가
int main(void)
{
	LinkedList data;
	int data_count = 0;
	std::string command;
	bool exit = false;

	while (!exit)
	{
		command = menu();
		int command_int = atoi(command.c_str());
		if (command_int < 0)
		{
			command_int = 0;
		}
		switch (command_int)
		{
			case 1:
			{
				data.add();
				break;
			}
			case 2:
			{
				data.print();
				break;
			}
			case 3:
			{
				data.calculate();
				break;
			}
			case 4:
			{
				//메뉴 4: 종료
				exit = true;
				break;
			}
			default:
			{
				std::cout << "잘못된 명령어입니다." << std::endl;
			}
		}
	}

	return 0;
}
